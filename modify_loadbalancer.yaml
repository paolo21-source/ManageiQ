---
- name: Modify OpenStack Load Balancer L4
  hosts: localhost
  gather_facts: no
  
  vars:
    # Azione da eseguire
    action: "{{ action | default('add_member') }}"
    
  tasks:
    # ========================================
    # VALIDATION
    # ========================================
    - name: Validate required variables
      assert:
        that:
          - loadbalancer_id is defined
          - loadbalancer_id | length > 0
          - action is defined
          - openstack_auth_url is defined
          - openstack_username is defined
          - openstack_password is defined
          - openstack_project_name is defined
        fail_msg: "ERRORE: Variabili richieste mancanti!"

    - name: Log start
      debug:
        msg: "Modifica Load Balancer ID: {{ loadbalancer_id }} | Azione: {{ action }}"

    # ========================================
    # NOTIFICA: INIZIO MODIFICA
    # ========================================
    - name: Send start notification to ManageIQ
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "info"
            message: "🚀 Avvio modifica Load Balancer | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      delegate_to: localhost
      when: 
        - manageiq_notification_url is defined
        - manageiq_auth_token is defined
      ignore_errors: yes

    # ========================================
    # GET LOAD BALANCER INFO (usando OpenStack CLI)
    # ========================================
    - name: Set OpenStack auth environment
      set_fact:
        os_env:
          OS_AUTH_URL: "{{ openstack_auth_url }}"
          OS_USERNAME: "{{ openstack_username }}"
          OS_PASSWORD: "{{ openstack_password }}"
          OS_PROJECT_NAME: "{{ openstack_project_name }}"
          OS_USER_DOMAIN_NAME: "{{ openstack_domain_name | default('Default') }}"
          OS_PROJECT_DOMAIN_NAME: "{{ openstack_domain_name | default('Default') }}"

    - name: Get Load Balancer details
      shell: |
        openstack loadbalancer show {{ loadbalancer_id }} -f json
      environment: "{{ os_env }}"
      register: lb_info_raw
      changed_when: false

    - name: Parse Load Balancer info
      set_fact:
        lb_info: "{{ lb_info_raw.stdout | from_json }}"

    - name: Set Load Balancer facts
      set_fact:
        lb_name: "{{ lb_info.name }}"
        lb_vip_address: "{{ lb_info.vip_address }}"
        lb_vip_port_id: "{{ lb_info.vip_port_id }}"
        lb_operating_status: "{{ lb_info.operating_status }}"

    - name: Log Load Balancer info
      debug:
        msg: "✅ Load Balancer: {{ lb_name }} (VIP: {{ lb_vip_address }}, Status: {{ lb_operating_status }})"

    # ========================================
    # AZIONE: ADD MEMBER
    # ========================================
    - name: Add member to pool
      when: action == 'add_member'
      block:
        - name: Validate add_member parameters
          assert:
            that:
              - pool_name is defined
              - member_address is defined
              - member_port is defined
            fail_msg: "❌ Parametri mancanti per add_member"

        - name: Set member name if not provided
          set_fact:
            member_name: "{{ member_name | default('member-' + member_address | replace('.', '-')) }}"

        - name: Add member to pool
          shell: |
            openstack loadbalancer member create \
              --name "{{ member_name }}" \
              --address "{{ member_address }}" \
              --protocol-port {{ member_port }} \
              {% if member_subnet is defined %}--subnet {{ member_subnet }}{% endif %} \
              --weight {{ member_weight | default(1) }} \
              --wait \
              {{ pool_name }}
          environment: "{{ os_env }}"
          register: member_add_result

        - name: Log member added
          debug:
            msg: "✅ Member {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"

        - name: Notify member added
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "✅ Backend server {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE MEMBER
    # ========================================
    - name: Remove member from pool
      when: action == 'remove_member'
      block:
        - name: Validate remove_member parameters
          assert:
            that:
              - pool_name is defined
              - member_name is defined
            fail_msg: "❌ Parametri mancanti per remove_member"

        - name: Get member ID
          shell: |
            openstack loadbalancer member list {{ pool_name }} -f json | \
            jq -r '.[] | select(.name=="{{ member_name }}") | .id'
          environment: "{{ os_env }}"
          register: member_id_raw
          changed_when: false

        - name: Set member ID
          set_fact:
            member_id: "{{ member_id_raw.stdout | trim }}"

        - name: Fail if member not found
          fail:
            msg: "❌ Member {{ member_name }} non trovato nel pool {{ pool_name }}"
          when: member_id == ""

        - name: Remove member from pool
          shell: |
            openstack loadbalancer member delete --wait {{ pool_name }} {{ member_id }}
          environment: "{{ os_env }}"
          register: member_remove_result

        - name: Log member removed
          debug:
            msg: "✅ Member {{ member_name }} rimosso dal pool {{ pool_name }}"

        - name: Notify member removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "✅ Backend server {{ member_name }} rimosso dal pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: UPDATE HEALTH MONITOR
    # ========================================
    - name: Update or create health monitor
      when: action == 'update_monitor'
      block:
        - name: Validate update_monitor parameters
          assert:
            that:
              - pool_name is defined
              - monitor_type is defined
              - monitor_delay is defined
              - monitor_timeout is defined
            fail_msg: "❌ Parametri mancanti per update_monitor"

        - name: Get pool ID
          shell: |
            openstack loadbalancer pool show {{ pool_name }} -f json | jq -r '.id'
          environment: "{{ os_env }}"
          register: pool_id_raw
          changed_when: false

        - name: Set pool ID
          set_fact:
            pool_id: "{{ pool_id_raw.stdout | trim }}"

        - name: Check if health monitor exists
          shell: |
            openstack loadbalancer pool show {{ pool_name }} -f json | jq -r '.health_monitor_id'
          environment: "{{ os_env }}"
          register: existing_monitor_raw
          changed_when: false
          ignore_errors: yes

        - name: Set monitor existence
          set_fact:
            monitor_exists: "{{ existing_monitor_raw.stdout | trim != '' and existing_monitor_raw.stdout | trim != 'null' }}"
            existing_monitor_id: "{{ existing_monitor_raw.stdout | trim }}"

        - name: Delete existing health monitor if present
          shell: |
            openstack loadbalancer healthmonitor delete --wait {{ existing_monitor_id }}
          environment: "{{ os_env }}"
          when: monitor_exists
          ignore_errors: yes

        - name: Build healthmonitor command
          set_fact:
            hm_cmd: >-
              openstack loadbalancer healthmonitor create
              --name {{ lb_name }}-monitor
              --type {{ monitor_type | upper }}
              --delay {{ monitor_delay }}
              --timeout {{ monitor_timeout }}
              --max-retries {{ monitor_max_retries | default(3) }}
              --max-retries-down {{ monitor_max_retries_down | default(3) }}
              {% if monitor_type | upper in ['HTTP', 'HTTPS'] %}
              {% if monitor_http_method is defined %}--http-method {{ monitor_http_method | upper }}{% endif %}
              {% if monitor_url_path is defined %}--url-path {{ monitor_url_path }}{% endif %}
              {% if monitor_expected_codes is defined %}--expected-codes {{ monitor_expected_codes }}{% endif %}
              {% endif %}
              --wait
              {{ pool_name }}

        - name: Create health monitor
          shell: "{{ hm_cmd }}"
          environment: "{{ os_env }}"
          register: monitor_create_result

        - name: Log monitor created
          debug:
            msg: "✅ Health Monitor creato/aggiornato per pool {{ pool_name }}"

        - name: Notify monitor updated
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "✅ Health Monitor ({{ monitor_type }}) configurato per pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: ASSIGN FLOATING IP
    # ========================================
    - name: Assign Floating IP to Load Balancer
      when: action == 'assign_fip'
      block:
        - name: Validate assign_fip parameters
          assert:
            that:
              - floating_ip is defined or floating_ip_pool is defined
            fail_msg: "❌ Specificare floating_ip o floating_ip_pool"

        - name: Create or allocate Floating IP
          shell: |
            {% if floating_ip is defined %}
            openstack floating ip show {{ floating_ip }} -f json || \
            openstack floating ip create {{ floating_ip_pool | default('external') }} --floating-ip-address {{ floating_ip }} -f json
            {% else %}
            openstack floating ip create {{ floating_ip_pool | default('external') }} -f json
            {% endif %}
          environment: "{{ os_env }}"
          register: fip_create_raw

        - name: Parse Floating IP
          set_fact:
            fip_address: "{{ (fip_create_raw.stdout | from_json).floating_ip_address }}"

        - name: Attach Floating IP to Load Balancer VIP port
          shell: |
            openstack floating ip set --port {{ lb_vip_port_id }} {{ fip_address }}
          environment: "{{ os_env }}"
          register: fip_attach_result

        - name: Log FIP assigned
          debug:
            msg: "✅ Floating IP {{ fip_address }} assegnato al Load Balancer {{ lb_name }}"

        - name: Notify FIP assigned
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "✅ Floating IP {{ fip_address }} assegnato al Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE FLOATING IP
    # ========================================
    - name: Remove Floating IP from Load Balancer
      when: action == 'remove_fip'
      block:
        - name: Get Floating IPs attached to VIP port
          shell: |
            openstack floating ip list --port {{ lb_vip_port_id }} -f json
          environment: "{{ os_env }}"
          register: fips_raw
          changed_when: false

        - name: Parse Floating IPs
          set_fact:
            attached_fips: "{{ fips_raw.stdout | from_json }}"

        - name: Detach Floating IPs
          shell: |
            openstack floating ip unset --port {{ item['Floating IP Address'] }}
          environment: "{{ os_env }}"
          loop: "{{ attached_fips }}"
          when: attached_fips | length > 0

        - name: Log FIP removed
          debug:
            msg: "✅ Floating IP rimosso dal Load Balancer {{ lb_name }}"

        - name: Notify FIP removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "✅ Floating IP rimosso dal Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # FINAL SUMMARY
    # ========================================
    - name: Generate final summary
      debug:
        msg: |
          ╔═══════════════════════════════════════════════════════════════════╗
          ║              LOAD BALANCER MODIFICATO CON SUCCESSO                ║
          ╚═══════════════════════════════════════════════════════════════════╝
          
          Load Balancer: {{ lb_name }}
          Azione:        {{ action }}
          VIP:           {{ lb_vip_address }}
          Status:        {{ lb_operating_status }}
          {% if fip_address is defined %}Floating IP:   {{ fip_address }}{% endif %}

    - name: Send final notification
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "success"
            message: "✅ Load Balancer {{ lb_name }} modificato con successo | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      when: manageiq_notification_url is defined
      ignore_errors: yes
