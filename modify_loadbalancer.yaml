---
- name: Modify OpenStack Load Balancer L4 via API
  hosts: localhost
  gather_facts: no
  
  vars:
    action: "{{ action | default('add_member') }}"
    
  tasks:
    # ========================================
    # VALIDATION
    # ========================================
    - name: Validate required variables
      assert:
        that:
          - loadbalancer_id is defined
          - loadbalancer_id | length > 0
          - action is defined
          - openstack_auth_url is defined
          - openstack_username is defined
          - openstack_password is defined
          - openstack_project_name is defined
        fail_msg: "ERRORE: Variabili richieste mancanti!"

    - name: Log start
      debug:
        msg: "üöÄ Modifica Load Balancer ID: {{ loadbalancer_id }} | Azione: {{ action }}"

    # ========================================
    # NOTIFICA: INIZIO
    # ========================================
    - name: Send start notification to ManageIQ
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "info"
            message: "üöÄ Avvio modifica Load Balancer | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      when:
        - manageiq_notification_url is defined
        - manageiq_auth_token is defined
      ignore_errors: yes

    # ========================================
    # AUTHENTICATE OPENSTACK KEYSTONE
    # ========================================
    - name: Authenticate to OpenStack Keystone
      uri:
        url: "{{ openstack_auth_url }}/v3/auth/tokens"
        method: POST
        body:
          auth:
            identity:
              methods:
                - password
              password:
                user:
                  name: "{{ openstack_username }}"
                  domain:
                    name: "{{ openstack_domain_name | default('Default') }}"
                  password: "{{ openstack_password }}"
            scope:
              project:
                name: "{{ openstack_project_name }}"
                domain:
                  name: "{{ openstack_domain_name | default('Default') }}"
        body_format: json
        status_code: 201
        return_content: yes
        validate_certs: no
      register: auth_response

    - name: Extract auth token
      set_fact:
        os_auth_token: "{{ auth_response.x_subject_token }}"

    - name: Parse service catalog
      set_fact:
        service_catalog: "{{ auth_response.json.token.catalog }}"

    - name: Find Octavia endpoint
      set_fact:
        octavia_endpoint: "{{ item.endpoints | selectattr('interface', 'equalto', 'public') | map(attribute='url') | first | default(item.endpoints | selectattr('interface', 'equalto', 'internal') | map(attribute='url') | first) }}"
      when: item.type == 'load-balancer' or item.name == 'octavia'
      loop: "{{ service_catalog }}"
      register: octavia_search

    - name: Set Octavia URL
      set_fact:
        octavia_url: "{{ octavia_search.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.octavia_endpoint') | select('defined') | first }}"

    - name: Fail if Octavia not found
      fail:
        msg: "‚ùå Servizio Octavia non trovato nel service catalog"
      when: octavia_url is not defined or octavia_url == ""

    - name: Log Octavia endpoint
      debug:
        msg: "‚úÖ Octavia endpoint: {{ octavia_url }}"

    # ========================================
    # GET LOAD BALANCER INFO
    # ========================================
    - name: Get Load Balancer details via API
      uri:
        url: "{{ octavia_url }}/v2.0/lbaas/loadbalancers/{{ loadbalancer_id }}"
        method: GET
        headers:
          X-Auth-Token: "{{ os_auth_token }}"
          Content-Type: application/json
        status_code: 200
        return_content: yes
        validate_certs: no
      register: lb_response

    - name: Set Load Balancer facts
      set_fact:
        lb_info: "{{ lb_response.json.loadbalancer }}"
        lb_name: "{{ lb_response.json.loadbalancer.name }}"
        lb_vip_address: "{{ lb_response.json.loadbalancer.vip_address }}"
        lb_vip_port_id: "{{ lb_response.json.loadbalancer.vip_port_id }}"
        lb_operating_status: "{{ lb_response.json.loadbalancer.operating_status }}"

    - name: Log Load Balancer info
      debug:
        msg: "‚úÖ Load Balancer: {{ lb_name }} (VIP: {{ lb_vip_address }}, Status: {{ lb_operating_status }})"

    # ========================================
    # AZIONE: ADD MEMBER
    # ========================================
    - name: Add member to pool
      when: action == 'add_member'
      block:
        - name: Validate add_member parameters
          assert:
            that:
              - pool_name is defined
              - member_address is defined
              - member_port is defined
            fail_msg: "‚ùå Parametri mancanti per add_member"

        - name: Set member name if not provided
          set_fact:
            member_name: "{{ member_name | default('member-' + member_address | replace('.', '-')) }}"

        - name: Get pool ID by name
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools?name={{ pool_name }}"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: pool_response

        - name: Extract pool ID
          set_fact:
            pool_id: "{{ pool_response.json.pools[0].id }}"
          when: pool_response.json.pools | length > 0

        - name: Fail if pool not found
          fail:
            msg: "‚ùå Pool {{ pool_name }} non trovato"
          when: pool_id is not defined

        - name: Create member via API
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools/{{ pool_id }}/members"
            method: POST
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
              Content-Type: application/json
            body:
              member:
                name: "{{ member_name }}"
                address: "{{ member_address }}"
                protocol_port: "{{ member_port | int }}"
                weight: "{{ member_weight | default(1) | int }}"
                subnet_id: "{{ member_subnet | default(omit) }}"
            body_format: json
            status_code: 201
            return_content: yes
            validate_certs: no
          register: member_create_response

        - name: Wait for member to be ACTIVE
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools/{{ pool_id }}/members/{{ member_create_response.json.member.id }}"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: member_status
          until: member_status.json.member.operating_status in ['ONLINE', 'ERROR']
          retries: 30
          delay: 5

        - name: Log member added
          debug:
            msg: "‚úÖ Member {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"

        - name: Notify member added
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Backend server {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE MEMBER
    # ========================================
    - name: Remove member from pool
      when: action == 'remove_member'
      block:
        - name: Validate remove_member parameters
          assert:
            that:
              - pool_name is defined
              - member_name is defined
            fail_msg: "‚ùå Parametri mancanti per remove_member"

        - name: Get pool ID by name
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools?name={{ pool_name }}"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: pool_response

        - name: Extract pool ID
          set_fact:
            pool_id: "{{ pool_response.json.pools[0].id }}"
          when: pool_response.json.pools | length > 0

        - name: Get members from pool
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools/{{ pool_id }}/members"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: members_response

        - name: Find member ID by name
          set_fact:
            member_id: "{{ item.id }}"
          when: item.name == member_name
          loop: "{{ members_response.json.members }}"

        - name: Fail if member not found
          fail:
            msg: "‚ùå Member {{ member_name }} non trovato nel pool {{ pool_name }}"
          when: member_id is not defined

        - name: Delete member via API
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools/{{ pool_id }}/members/{{ member_id }}"
            method: DELETE
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 204
            validate_certs: no

        - name: Log member removed
          debug:
            msg: "‚úÖ Member {{ member_name }} rimosso dal pool {{ pool_name }}"

        - name: Notify member removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Backend server {{ member_name }} rimosso dal pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: UPDATE HEALTH MONITOR
    # ========================================
    - name: Update or create health monitor
      when: action == 'update_monitor'
      block:
        - name: Validate update_monitor parameters
          assert:
            that:
              - monitor_type is defined
              - monitor_delay is defined
              - monitor_timeout is defined
            fail_msg: "‚ùå Parametri mancanti per update_monitor"

        - name: Get pools for this Load Balancer
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/pools?loadbalancer_id={{ loadbalancer_id }}"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: lb_pools_response

        - name: Fail if no pools found
          fail:
            msg: "‚ùå Nessun pool trovato per questo Load Balancer"
          when: lb_pools_response.json.pools | length == 0

        - name: Use specified pool or first pool
          set_fact:
            target_pool: "{{ lb_pools_response.json.pools | selectattr('name', 'equalto', pool_name) | first if pool_name is defined else lb_pools_response.json.pools[0] }}"

        - name: Extract pool info
          set_fact:
            pool_id: "{{ target_pool.id }}"
            pool_name: "{{ target_pool.name }}"
            existing_monitor_id: "{{ target_pool.healthmonitor_id | default('') }}"

        - name: Log pool selection
          debug:
            msg: "üìã Configurazione health monitor per pool: {{ pool_name }} (ID: {{ pool_id }})"

        - name: Delete existing health monitor if present
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/healthmonitors/{{ existing_monitor_id }}"
            method: DELETE
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: [204, 404]
            validate_certs: no
          when: existing_monitor_id != ""
          ignore_errors: yes

        - name: Build health monitor body
          set_fact:
            monitor_body:
              healthmonitor:
                name: "{{ lb_name }}-monitor"
                type: "{{ monitor_type | upper }}"
                delay: "{{ monitor_delay | int }}"
                timeout: "{{ monitor_timeout | int }}"
                max_retries: "{{ monitor_max_retries | default(3) | int }}"
                max_retries_down: "{{ monitor_max_retries_down | default(3) | int }}"
                pool_id: "{{ pool_id }}"

        - name: Add HTTP parameters if applicable
          set_fact:
            monitor_body: "{{ monitor_body | combine({'healthmonitor': monitor_body.healthmonitor | combine(http_params)}, recursive=True) }}"
          vars:
            http_params:
              http_method: "{{ monitor_http_method | default('GET') | upper }}"
              url_path: "{{ monitor_url_path | default('/') }}"
              expected_codes: "{{ monitor_expected_codes | default('200') }}"
          when: monitor_type | upper in ['HTTP', 'HTTPS']

        - name: Create health monitor via API
          uri:
            url: "{{ octavia_url }}/v2.0/lbaas/healthmonitors"
            method: POST
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
              Content-Type: application/json
            body: "{{ monitor_body }}"
            body_format: json
            status_code: 201
            return_content: yes
            validate_certs: no
          register: monitor_create_response

        - name: Log monitor created
          debug:
            msg: "‚úÖ Health Monitor creato per pool {{ pool_name }}"

        - name: Notify monitor updated
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Health Monitor ({{ monitor_type }}) configurato per pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: ASSIGN FLOATING IP
    # ========================================
    - name: Assign Floating IP
      when: action == 'assign_fip'
      block:
        - name: Validate assign_fip parameters
          assert:
            that:
              - floating_ip is defined or floating_ip_pool is defined
            fail_msg: "‚ùå Specificare floating_ip o floating_ip_pool"

        - name: Get Neutron endpoint
          set_fact:
            neutron_endpoint: "{{ item.endpoints | selectattr('interface', 'equalto', 'public') | map(attribute='url') | first | default(item.endpoints | selectattr('interface', 'equalto', 'internal') | map(attribute='url') | first) }}"
          when: item.type == 'network'
          loop: "{{ service_catalog }}"
          register: neutron_search

        - name: Set Neutron URL
          set_fact:
            neutron_url: "{{ neutron_search.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.neutron_endpoint') | select('defined') | first }}"

        - name: Get or create Floating IP
          uri:
            url: "{{ neutron_url }}/v2.0/floatingips"
            method: POST
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
              Content-Type: application/json
            body:
              floatingip:
                floating_network_id: "{{ floating_ip_pool | default('external') }}"
                floating_ip_address: "{{ floating_ip | default(omit) }}"
                port_id: "{{ lb_vip_port_id }}"
            body_format: json
            status_code: [201, 409]
            return_content: yes
            validate_certs: no
          register: fip_response

        - name: Extract Floating IP
          set_fact:
            lb_floating_ip: "{{ fip_response.json.floatingip.floating_ip_address }}"

        - name: Log FIP assigned
          debug:
            msg: "‚úÖ Floating IP {{ lb_floating_ip }} assegnato"

        - name: Notify FIP assigned
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Floating IP {{ lb_floating_ip }} assegnato al Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE FLOATING IP
    # ========================================
    - name: Remove Floating IP
      when: action == 'remove_fip'
      block:
        - name: Get Neutron endpoint
          set_fact:
            neutron_endpoint: "{{ item.endpoints | selectattr('interface', 'equalto', 'public') | map(attribute='url') | first | default(item.endpoints | selectattr('interface', 'equalto', 'internal') | map(attribute='url') | first) }}"
          when: item.type == 'network'
          loop: "{{ service_catalog }}"
          register: neutron_search

        - name: Set Neutron URL
          set_fact:
            neutron_url: "{{ neutron_search.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.neutron_endpoint') | select('defined') | first }}"

        - name: Get Floating IPs attached to port
          uri:
            url: "{{ neutron_url }}/v2.0/floatingips?port_id={{ lb_vip_port_id }}"
            method: GET
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 200
            return_content: yes
            validate_certs: no
          register: fips_response

        - name: Delete Floating IPs
          uri:
            url: "{{ neutron_url }}/v2.0/floatingips/{{ item.id }}"
            method: DELETE
            headers:
              X-Auth-Token: "{{ os_auth_token }}"
            status_code: 204
            validate_certs: no
          loop: "{{ fips_response.json.floatingips }}"
          when: fips_response.json.floatingips | length > 0

        - name: Log FIP removed
          debug:
            msg: "‚úÖ Floating IP rimosso"

        - name: Notify FIP removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Floating IP rimosso dal Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when: manageiq_notification_url is defined
          ignore_errors: yes

    # ========================================
    # FINAL SUMMARY
    # ========================================
    - name: Generate final summary
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë              LOAD BALANCER MODIFICATO CON SUCCESSO                ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          
          Load Balancer: {{ lb_name }}
          Azione:        {{ action }}
          VIP:           {{ lb_vip_address }}
          Status:        {{ lb_operating_status }}
          {% if lb_floating_ip is defined %}Floating IP:   {{ lb_floating_ip }}{% endif %}

    - name: Send final notification
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "success"
            message: "‚úÖ Load Balancer {{ lb_name }} modificato con successo | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      when: manageiq_notification_url is defined
      ignore_errors: yes
