---
# ============================================
# Playbook AWX: Manage Cinder Volume Backup Schedule
# VERSIONE CORRETTA - usa solo moduli Ansible
# ============================================

- name: Manage Cinder Volume Backup Schedule
  hosts: localhost
  connection: local
  gather_facts: true
  
  vars:
    awx_host: "https://services.xaaslab.it"
    awx_user: "paolo.astorino"
    awx_password: "gaxH=5[]zu22"
    awx_validate_certs: false
    retention_days: 15
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Validate required variables
      assert:
        that:
          - volume_id is defined and volume_id | length > 0
          - backup_action is defined and backup_action | length > 0
        fail_msg: "ERROR: Missing required variables (volume_id, backup_action)"
        success_msg: "Variables OK - volume_id: {{ volume_id }}, backup_action: {{ backup_action }}"
    
    # =============================================
    # 2. IMPOSTA DEFAULT
    # =============================================
    
    - name: Set tenant_name from variable or environment
      set_fact:
        tenant_name: "{{ tenant_name | default(lookup('env', 'OS_PROJECT_NAME') | default('default')) }}"
    
    # =============================================
    # 3. RECUPERA NOME VOLUME DA OPENSTACK
    # =============================================
    
    - name: Get all volumes from OpenStack
      openstack.cloud.volume_info:
        details: true
      register: all_volumes
    
    - name: Find volume by ID
      set_fact:
        volume_data: "{{ all_volumes.volumes | selectattr('id', 'equalto', volume_id) | first | default(None) }}"
    
    - name: Check if volume exists
      fail:
        msg: "Volume {{ volume_id }} not found"
      when: volume_data is none
    
    - name: Set volume name
      set_fact:
        volume_name: "{{ volume_data.name }}"
    
    # =============================================
    # 4. DISPLAY INFO
    # =============================================
    
    - name: Log action
      debug:
        msg: 
          - "=============================================="
          - "MANAGE BACKUP SCHEDULE"
          - "=============================================="
          - "Action: {{ backup_action }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 5. DELETE EXISTING SCHEDULES
    # =============================================
    
    - name: Delete existing schedules for this volume
      awx.awx.schedule:
        name: "Giornaliero - {{ volume_name }} - {{ tenant_name }} - ({{ volume_id }})"
        state: absent
        controller_host: "{{ awx_host }}"
        controller_username: "{{ awx_user }}"
        controller_password: "{{ awx_password }}"
        validate_certs: "{{ awx_validate_certs }}"
      ignore_errors: true
    
    - name: Show delete result
      debug:
        msg: "✓ Deleted existing schedules (if any)"
    
    # =============================================
    # 6. CREATE NEW SCHEDULE (if backup_action=enable)
    # =============================================
    
    - name: Create new schedule with tenant and retention info
      awx.awx.schedule:
        name: " Giornaliero - {{ backup_name }} - {{ tenant_name }} - ({{ volume_id }})"
        unified_job_template: "Cinder Volume Backup"
        rrule: "DTSTART;TZID=UTC:{{ lookup('pipe', 'date +%Y%m%d') }}T020000 RRULE:FREQ=DAILY;INTERVAL=1"
        extra_data:
          volume_id: "{{ volume_id }}"
          tenant_name: "{{ tenant_name }}"
          backup_name: "daily_{{ backup_name }}"
          retention_days: "{{ retention_days }}"
        state: present
        controller_host: "{{ awx_host }}"
        controller_username: "{{ awx_user }}"
        controller_password: "{{ awx_password }}"
        validate_certs: "{{ awx_validate_certs }}"
      when: backup_action == "enable"
      register: schedule_result
    
    # =============================================
    # 7. DISPLAY SCHEDULE INFO
    # =============================================
    
    - name: Display schedule ID created
      debug:
        msg: 
          - "✓ Schedule creato con successo!"
          - "Schedule Name: {{ schedule_result.name | default('N/A') }}"
          - "Schedule ID: {{ schedule_result.id | default('N/A') }}"
          - "Tenant: {{ tenant_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "Backup name format: YYYY_MM_DD_daily_backup_{{ tenant_name }}"
      when: 
        - backup_action == "enable"
        - schedule_result is defined
    
    # =============================================
    # 8. SUCCESS MESSAGES
    # =============================================
    
    - name: Show success message (enable)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE ATTIVATO"
          - "=============================================="
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Frequenza: daily"
          - "Retention: {{ retention_days }} giorni"
          - "Backup name format: YYYY_MM_DD_daily_backup_{{ tenant_name }}"
          - "=============================================="
      when: backup_action == "enable"
    
    - name: Show success message (disable)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE DISATTIVATO"
          - "=============================================="
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Tutti gli schedule per questo volume sono stati eliminati"
          - "=============================================="
      when: backup_action == "disable"
