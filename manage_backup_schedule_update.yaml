---
# ============================================
# Playbook AWX: Manage Cinder Volume Backup Schedule
# VERSIONE COMPLETA - Supporta: enable, disable, activate, deactivate
# ============================================

- name: Manage Cinder Volume Backup Schedule
  hosts: localhost
  connection: local
  gather_facts: true
  
  vars:
    awx_host: "https://services.linuxwall.it"
    awx_user: "paolo.astorino"
    awx_password: "gaxH=5[]zu22"
    awx_validate_certs: false
    retention_days: 15
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Validate required variables
      assert:
        that:
          - volume_id is defined and volume_id | length > 0
          - backup_action is defined and backup_action | length > 0
          - backup_action in ['enable', 'disable', 'activate', 'deactivate']
        fail_msg: "ERROR: Missing or invalid variables (volume_id, backup_action)"
        success_msg: "Variables OK - volume_id: {{ volume_id }}, backup_action: {{ backup_action }}"
    
    - name: Validate schedule_id for activate/deactivate actions
      assert:
        that:
          - schedule_id is defined and schedule_id | length > 0
        fail_msg: "ERROR: schedule_id is required for activate/deactivate actions"
      when: backup_action in ['activate', 'deactivate']
    
    - name: Validate backup_name for enable action
      assert:
        that:
          - backup_name is defined and backup_name | length > 0
        fail_msg: "ERROR: backup_name is required for enable action"
      when: backup_action == 'enable'
    
    # =============================================
    # 2. IMPOSTA DEFAULT
    # =============================================
    
    - name: Set tenant_name from variable or environment
      set_fact:
        tenant_name: "{{ tenant_name | default(lookup('env', 'OS_PROJECT_NAME') | default('default')) }}"
    
    # =============================================
    # 3. RECUPERA NOME VOLUME DA OPENSTACK (CON FALLBACK)
    # =============================================
    
    - name: Try to get volume from OpenStack
      block:
        - name: Get all volumes from OpenStack
          openstack.cloud.volume_info:
            details: true
          register: all_volumes
        
        - name: Find volume by ID
          set_fact:
            volume_data: "{{ all_volumes.volumes | selectattr('id', 'equalto', volume_id) | first | default(None) }}"
        
        - name: Check if volume exists in OpenStack
          fail:
            msg: "Volume {{ volume_id }} not found in OpenStack"
          when: volume_data is none
        
        - name: Set volume name from OpenStack
          set_fact:
            volume_name: "{{ volume_data.name }}"
        
        - name: Display success - volume found in OpenStack
          debug:
            msg: "✓ Volume trovato in OpenStack: {{ volume_name }}"
      
      rescue:
        - name: Cinder service not available - using fallback
          debug:
            msg: 
              - "⚠ Servizio Cinder non disponibile o non accessibile"
              - "Utilizzo backup_name come nome volume"
        
        - name: Set fallback volume name
          set_fact:
            volume_name: "{{ backup_name | default('volume_' ~ volume_id[:8]) }}"
            volume_data:
              id: "{{ volume_id }}"
              name: "{{ backup_name | default('volume_' ~ volume_id[:8]) }}"
        
        - name: Display fallback info
          debug:
            msg: "✓ Utilizzo nome fallback: {{ volume_name }}"
    
    - name: Confirm volume info
      debug:
        msg: 
          - "Volume configurato:"
          - "  - Nome: {{ volume_name }}"
          - "  - ID: {{ volume_id }}"
    
    # =============================================
    # 4. RECUPERA SCHEDULE ESISTENTI
    # =============================================
    
    - name: Get all schedules from AWX
      uri:
        url: "{{ awx_host }}/api/v2/schedules/"
        method: GET
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        return_content: yes
      register: awx_schedules
    
    - name: Filter schedules for this volume
      set_fact:
        volume_schedules: "{{ awx_schedules.json.results | selectattr('name', 'search', volume_id) | list }}"
    
    - name: Filter active schedules for this volume
      set_fact:
        active_schedules: "{{ volume_schedules | selectattr('enabled', 'equalto', true) | list }}"
    
    # =============================================
    # 5. DISPLAY INFO
    # =============================================
    
    - name: Log action
      debug:
        msg: 
          - "=============================================="
          - "MANAGE BACKUP SCHEDULE"
          - "=============================================="
          - "Action: {{ backup_action }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Existing schedules: {{ volume_schedules | length }}"
          - "Active schedules: {{ active_schedules | length }}"
          - "=============================================="
    
    # =============================================
    # 6. AZIONE: ENABLE (Crea nuovo schedule)
    # =============================================
    
    - name: Check if active schedule already exists (for enable action)
      fail:
        msg: |
          ERRORE: Esiste già un backup schedule attivo per questo volume!
          Nome schedule esistente: {{ active_schedules[0].name }}
          Per creare un nuovo schedule, prima disattiva o elimina quello esistente.
      when: 
        - backup_action == 'enable'
        - active_schedules | length > 0
    
    - name: Create new backup schedule
      awx.awx.schedule:
        name: "Giornaliero - {{ backup_name }} - {{ tenant_name }} - ({{ volume_id }})"
        unified_job_template: "Cinder Volume Backup"
        rrule: "DTSTART;TZID=UTC:{{ lookup('pipe', 'date +%Y%m%d') }}T020000 RRULE:FREQ=DAILY;INTERVAL=1"
        enabled: true
        extra_data:
          volume_id: "{{ volume_id }}"
          tenant_name: "{{ tenant_name }}"
          backup_name: "daily_{{ backup_name }}"
          retention_days: "{{ retention_days }}"
        state: present
        controller_host: "{{ awx_host }}"
        controller_username: "{{ awx_user }}"
        controller_password: "{{ awx_password }}"
        validate_certs: "{{ awx_validate_certs }}"
      when: backup_action == "enable"
      register: schedule_create_result
    
    - name: Show success message (enable)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE CREATO E ATTIVATO"
          - "=============================================="
          - "Schedule ID: {{ schedule_create_result.id }}"
          - "Nome: Giornaliero - {{ backup_name }} - {{ tenant_name }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Frequenza: Giornaliero (02:00 UTC)"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
      when: 
        - backup_action == "enable"
        - schedule_create_result is defined
    
    # =============================================
    # 7. AZIONE: DISABLE (Elimina tutti gli schedule)
    # =============================================
    
    - name: Delete all schedules for this volume
      uri:
        url: "{{ awx_host }}/api/v2/schedules/{{ item.id }}/"
        method: DELETE
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        status_code: [204, 404]
      loop: "{{ volume_schedules }}"
      when: 
        - backup_action == "disable"
        - volume_schedules | length > 0
      ignore_errors: true
    
    - name: Show success message (disable)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE ELIMINATI"
          - "=============================================="
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Schedules eliminati: {{ volume_schedules | length }}"
          - "=============================================="
      when: backup_action == "disable"
    
    - name: No schedules to delete
      debug:
        msg: "Nessuno schedule trovato da eliminare per questo volume"
      when: 
        - backup_action == "disable"
        - volume_schedules | length == 0
    
    # =============================================
    # 8. AZIONE: ACTIVATE (Attiva schedule esistente)
    # =============================================
    
    - name: Get schedule details
      uri:
        url: "{{ awx_host }}/api/v2/schedules/{{ schedule_id }}/"
        method: GET
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        return_content: yes
      register: schedule_details
      when: backup_action == "activate"
    
    - name: Activate schedule
      uri:
        url: "{{ awx_host }}/api/v2/schedules/{{ schedule_id }}/"
        method: PATCH
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        body_format: json
        body:
          enabled: true
        status_code: [200, 204]
      when: backup_action == "activate"
      register: activate_result
    
    - name: Show success message (activate)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE ATTIVATO"
          - "=============================================="
          - "Schedule ID: {{ schedule_id }}"
          - "Nome: {{ schedule_details.json.name }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Prossima esecuzione: {{ schedule_details.json.next_run | default('N/A') }}"
          - "=============================================="
      when: 
        - backup_action == "activate"
        - activate_result is defined
    
    # =============================================
    # 9. AZIONE: DEACTIVATE (Disattiva schedule esistente)
    # =============================================
    
    - name: Get schedule details for deactivate
      uri:
        url: "{{ awx_host }}/api/v2/schedules/{{ schedule_id }}/"
        method: GET
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        return_content: yes
      register: schedule_details_deactivate
      when: backup_action == "deactivate"
    
    - name: Deactivate schedule
      uri:
        url: "{{ awx_host }}/api/v2/schedules/{{ schedule_id }}/"
        method: PATCH
        user: "{{ awx_user }}"
        password: "{{ awx_password }}"
        force_basic_auth: yes
        validate_certs: "{{ awx_validate_certs }}"
        body_format: json
        body:
          enabled: false
        status_code: [200, 204]
      when: backup_action == "deactivate"
      register: deactivate_result
    
    - name: Show success message (deactivate)
      debug:
        msg: 
          - "=============================================="
          - "✓ BACKUP SCHEDULE DISATTIVATO"
          - "=============================================="
          - "Schedule ID: {{ schedule_id }}"
          - "Nome: {{ schedule_details_deactivate.json.name }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Lo schedule è stato disattivato ma non eliminato"
          - "=============================================="
      when: 
        - backup_action == "deactivate"
        - deactivate_result is defined
