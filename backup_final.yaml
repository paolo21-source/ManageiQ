---
# ============================================
# Cinder Volume Backup - VERSIONE SEMPLIFICATA
# Solo volume_id (required) e tenant_name (optional)
# ============================================

- name: Execute OpenStack Cinder Volume Backup
  hosts: localhost
  connection: local
  gather_facts: true
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Ensure volume_id is provided
      assert:
        that: volume_id is defined and volume_id | length > 0
        fail_msg: "ERROR: volume_id is missing or empty"
        success_msg: "Volume ID received: {{ volume_id }}"
    
    # =============================================
    # 2. IMPOSTA VALORI DI DEFAULT
    # =============================================
    
    - name: Set default retention
      set_fact:
        retention_days: "{{ retention_days | default(15) }}"
    
    # =============================================
    # 3. RECUPERA INFO VOLUME DA OPENSTACK
    # Include project_id (tenant)
    # =============================================
    
    - name: Get volume info from OpenStack
      openstack.cloud.volume_info:
        name: "{{ volume_id }}"
      register: volume_info
    
    - name: Set volume data
      set_fact:
        volume_data: "{{ volume_info.volumes[0] }}"
      when:
        - volume_info.volumes is defined
        - volume_info.volumes | length > 0
    
    - name: Set volume name
      set_fact:
        volume_name: "{{ volume_data.name }}"
    
    - name: Set volume project_id (tenant)
      set_fact:
        volume_project_id: "{{ volume_data.os-vol-tenant-attr:tenant_id | default(volume_data.attachments[0].project_id | default('unknown')) }}"
    
    - name: Display volume info
      debug:
        msg:
          - "Volume name: {{ volume_name }}"
          - "Volume project_id: {{ volume_project_id }}"
    
    # =============================================
    # 4. RECUPERA TENANT NAME DA PROJECT_ID
    # =============================================
    
    - name: Get project/tenant info from OpenStack
      openstack.cloud.project_info:
        name: "{{ volume_project_id }}"
      register: project_info
      when: volume_project_id != 'unknown'
      ignore_errors: true
    
    - name: Set tenant name from project info
      set_fact:
        tenant_name: "{{ project_info.projects[0].name }}"
      when:
        - project_info is defined
        - project_info.projects is defined
        - project_info.projects | length > 0
    
    - name: Fallback - try to get tenant from environment
      set_fact:
        tenant_name: "{{ lookup('env', 'OS_PROJECT_NAME') }}"
      when: 
        - tenant_name is not defined
        - lookup('env', 'OS_PROJECT_NAME') | length > 0
    
    - name: Final fallback - use volume project_id as tenant name
      set_fact:
        tenant_name: "{{ volume_project_id }}"
      when: tenant_name is not defined
    
    - name: Display tenant info
      debug:
        msg: "Tenant resolved: {{ tenant_name }}"
    
    # =============================================
    # 5. GENERA NOME BACKUP
    # Format: anno_mese_giorno_backup_volumename_tenantname
    # =============================================
    
    - name: Clean volume name (remove special characters)
      set_fact:
        clean_volume_name: "{{ volume_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Clean tenant name (remove special characters)
      set_fact:
        clean_tenant_name: "{{ tenant_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Generate backup name
      set_fact:
        backup_name: "{{ ansible_date_time.year }}_{{ '%02d' | format(ansible_date_time.month | int) }}_{{ '%02d' | format(ansible_date_time.day | int) }}_backup_{{ clean_volume_name }}_{{ clean_tenant_name }}"
    
    - name: Display backup info
      debug:
        msg:
          - "=============================================="
          - "BACKUP VOLUME OPENSTACK"
          - "=============================================="
          - "Volume ID: {{ volume_id }}"
          - "Volume Name: {{ volume_name }}"
          - "Tenant: {{ tenant_name }}"
          - "Backup Name: {{ backup_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 6. CREA BACKUP
    # =============================================
    
    - name: Create OpenStack volume backup
      openstack.cloud.volume_backup:
        volume: "{{ volume_id }}"
        state: present
        force: true
        name: "{{ backup_name }}"
        description: "Backup automatico daily - Retention {{ retention_days }}gg - Tenant: {{ tenant_name }}"
      register: backup_result
    
    - name: Show backup result
      debug:
        msg: 
          - "✓ Backup created successfully!"
          - "Name: {{ backup_result.backup.name }}"
          - "ID: {{ backup_result.backup.id }}"
          - "Status: {{ backup_result.backup.status }}"
      when: backup_result.backup is defined
    
    # =============================================
    # 7. APPLICA RETENTION POLICY (15gg)
    # =============================================
    
    - name: Get all backups for this volume
      openstack.cloud.volume_backup_info:
        volume: "{{ volume_id }}"
      register: all_backups_info
      ignore_errors: true
    
    - name: Set backups list
      set_fact:
        all_backups: "{{ all_backups_info.backups | default([]) }}"
      when: all_backups_info is defined
    
    - name: Calculate retention date (Python)
      set_fact:
        retention_date: "{{ '%Y-%m-%d' | strftime((ansible_date_time.epoch | int) - (retention_days | int * 86400)) }}"
    
    - name: Find old backups to delete
      set_fact:
        old_backups: "{{ all_backups | selectattr('created_at', 'defined') | selectattr('created_at', 'lt', retention_date) | list }}"
      when: all_backups | length > 0
    
    - name: Display retention info
      debug:
        msg:
          - "Retention: {{ retention_days }} giorni"
          - "Cutoff date: {{ retention_date }}"
          - "Total backups: {{ all_backups | length }}"
          - "Backups to delete: {{ old_backups | default([]) | length }}"
    
    - name: Delete old backups
      openstack.cloud.volume_backup:
        name: "{{ item.id }}"
        state: absent
      loop: "{{ old_backups }}"
      when:
        - old_backups is defined
        - old_backups | length > 0
      register: delete_results
      ignore_errors: true
    
    - name: Show cleanup result
      debug:
        msg: "✓ Retention applied - Deleted {{ delete_results.results | default([]) | length }} old backup(s)"
      when:
        - old_backups is defined
        - old_backups | length > 0
    
    # =============================================
    # 8. RIEPILOGO FINALE
    # =============================================
    
    - name: Final summary
      debug:
        msg:
          - "=============================================="
          - "BACKUP COMPLETATO"
          - "=============================================="
          - "Backup Name: {{ backup_name }}"
          - "Backup ID: {{ backup_result.backup.id | default('N/A') }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "Old backups deleted: {{ old_backups | default([]) | length }}"
          - "=============================================="
