---
# ============================================
# Playbook AWX: Cinder Volume Backup (One-Shot)
# Eseguito dallo schedule per fare backup automatici
# Usa API REST con credenziali passate come extra_vars
# ============================================

- name: Create Cinder Volume Backup
  hosts: localhost
  connection: local
  gather_facts: true
  
  vars:
    # Configurazione OpenStack - valori di default
    os_auth_url: "https://region-milano.linuxwall.it:5000/v3"
    os_username: "sourcesense"
    os_project_name: "awx_test"
    os_project_domain_name: "default"
    os_user_domain_name: "default"
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Validate required variables
      assert:
        that:
          - volume_id is defined and volume_id | length > 0
          - tenant_name is defined and tenant_name | length > 0
          - retention_days is defined
          - os_password is defined and os_password | length > 0
        fail_msg: "ERROR: Missing required variables (volume_id, tenant_name, retention_days, os_password)"
        success_msg: "Variables OK - volume_id: {{ volume_id }}, tenant: {{ tenant_name }}"
    
    # =============================================
    # 2. DISPLAY AUTH INFO
    # =============================================
    
    - name: Display auth info
      debug:
        msg:
          - "Auth URL: {{ os_auth_url }}"
          - "Username: {{ os_username }}"
          - "Project: {{ os_project_name }}"
          - "User Domain: {{ os_user_domain_name }}"
          - "Project Domain: {{ os_project_domain_name }}"
          - "Password provided: Yes"
    
    # =============================================
    # 3. AUTENTICAZIONE OPENSTACK
    # =============================================
    
    - name: Get OpenStack token
      uri:
        url: "{{ os_auth_url }}/auth/tokens"
        method: POST
        body_format: json
        body:
          auth:
            identity:
              methods: ["password"]
              password:
                user:
                  name: "{{ os_username }}"
                  domain:
                    name: "{{ os_user_domain_name }}"
                  password: "{{ os_password }}"
            scope:
              project:
                name: "{{ os_project_name }}"
                domain:
                  name: "{{ os_project_domain_name }}"
        status_code: 201
        validate_certs: false
      register: auth_response
    
    - name: Set auth token and extract endpoints
      set_fact:
        os_token: "{{ auth_response.x_subject_token }}"
        service_catalog: "{{ auth_response.json.token.catalog }}"
    
    - name: Find Cinder endpoint (volumev3)
      set_fact:
        cinder_endpoint: "{{ service_catalog | selectattr('type', 'equalto', 'volumev3') | map(attribute='endpoints') | flatten | selectattr('interface', 'equalto', 'public') | map(attribute='url') | first | default('') }}"
    
    - name: Fallback to volumev2 if volumev3 not found
      set_fact:
        cinder_endpoint: "{{ service_catalog | selectattr('type', 'equalto', 'volumev2') | map(attribute='endpoints') | flatten | selectattr('interface', 'equalto', 'public') | map(attribute='url') | first | default('') }}"
      when: cinder_endpoint == ''
    
    - name: Check if Cinder endpoint exists
      fail:
        msg: "Block Storage service (Cinder) not available in this OpenStack cloud"
      when: cinder_endpoint == ''
    
    - name: Display Cinder endpoint
      debug:
        msg: "✓ Cinder endpoint trovato: {{ cinder_endpoint }}"
    
    # =============================================
    # 4. RECUPERA NOME VOLUME
    # =============================================
    
    - name: Get volume details from Cinder API
      uri:
        url: "{{ cinder_endpoint }}/volumes/{{ volume_id }}"
        method: GET
        headers:
          X-Auth-Token: "{{ os_token }}"
        validate_certs: false
        status_code: 200
      register: volume_response
    
    - name: Set volume data
      set_fact:
        volume_data: "{{ volume_response.json.volume }}"
        volume_name: "{{ volume_response.json.volume.name }}"
    
    - name: Display volume info
      debug:
        msg: "✓ Volume trovato: {{ volume_name }} ({{ volume_id }})"
    
    # =============================================
    # 5. GENERA NOME BACKUP FINALE
    # Format: anno_mese_giorno_nome_backup_tenant
    # =============================================
    
    - name: Generate date prefix
      set_fact:
        date_prefix: "{{ ansible_date_time.year }}_{{ '%02d' | format(ansible_date_time.month | int) }}_{{ '%02d' | format(ansible_date_time.day | int) }}"
    
    - name: Clean tenant name
      set_fact:
        clean_tenant_name: "{{ tenant_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Check if custom backup_name is provided
      set_fact:
        has_backup_name: "{{ backup_name is defined and backup_name | length > 0 }}"
    
    - name: Use custom backup name if provided
      set_fact:
        clean_backup_name: "{{ backup_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
      when: has_backup_name
    
    - name: Generate default backup name from volume if not provided
      set_fact:
        clean_backup_name: "backup_{{ volume_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
      when: not has_backup_name
    
    - name: Compose final backup name (date + name + tenant)
      set_fact:
        final_backup_name: "{{ date_prefix }}_{{ clean_backup_name }}_{{ clean_tenant_name }}"
    
    # =============================================
    # 6. DISPLAY INFO
    # =============================================
    
    - name: Display backup info
      debug:
        msg:
          - "=============================================="
          - "INIZIO BACKUP"
          - "=============================================="
          - "Volume ID: {{ volume_id }}"
          - "Volume Name: {{ volume_name }}"
          - "Tenant: {{ tenant_name }}"
          - "---"
          - "Nome backup finale: {{ final_backup_name }}"
          - "  - Data: {{ date_prefix }}"
          - "  - Nome: {{ clean_backup_name }}"
          - "  - Tenant: {{ clean_tenant_name }}"
          - "---"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 7. CREA BACKUP VIA API REST
    # =============================================
    
    - name: Create volume backup via Cinder API
      uri:
        url: "{{ cinder_endpoint }}/backups"
        method: POST
        headers:
          X-Auth-Token: "{{ os_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          backup:
            volume_id: "{{ volume_id }}"
            name: "{{ final_backup_name }}"
            description: "Backup automatico daily - Retention {{ retention_days }}gg - Tenant: {{ tenant_name }}"
            force: true
        validate_certs: false
        status_code: 202
      register: backup_create_response
    
    - name: Extract backup ID
      set_fact:
        backup_id: "{{ backup_create_response.json.backup.id }}"
    
    - name: Display backup creation info
      debug:
        msg: "✓ Backup creato con ID: {{ backup_id }}"
    
    # =============================================
    # 8. ATTENDI COMPLETAMENTO BACKUP
    # =============================================
    
    - name: Wait for backup to complete
      uri:
        url: "{{ cinder_endpoint }}/backups/{{ backup_id }}"
        method: GET
        headers:
          X-Auth-Token: "{{ os_token }}"
        validate_certs: false
        status_code: 200
      register: backup_status_response
      until: backup_status_response.json.backup.status in ['available', 'error']
      retries: 60
      delay: 10
    
    - name: Check backup final status
      fail:
        msg: "Backup failed with status: {{ backup_status_response.json.backup.status }}"
      when: backup_status_response.json.backup.status == 'error'
    
    - name: Display backup completion
      debug:
        msg: "✓ Backup completato con successo - Status: {{ backup_status_response.json.backup.status }}"
    
    # =============================================
    # 9. GESTIONE RETENTION
    # =============================================
    
    - name: Get all backups via Cinder API
      uri:
        url: "{{ cinder_endpoint }}/backups/detail"
        method: GET
        headers:
          X-Auth-Token: "{{ os_token }}"
        validate_certs: false
        status_code: 200
      register: all_backups_response
    
    - name: Filter backups for this volume only
      set_fact:
        volume_backups: "{{ all_backups_response.json.backups | selectattr('volume_id', 'equalto', volume_id) | list }}"
    
    - name: Sort backups by creation date (oldest first)
      set_fact:
        sorted_backups: "{{ volume_backups | sort(attribute='created_at') }}"
    
    - name: Calculate retention date (epoch)
      set_fact:
        retention_timestamp: "{{ (ansible_date_time.epoch | int - (retention_days | int * 86400)) }}"
    
    - name: Find old backups to delete
      set_fact:
        old_backups: []
    
    - name: Identify old backups based on retention
      set_fact:
        old_backups: "{{ old_backups + [item] }}"
      loop: "{{ sorted_backups }}"
      when: 
        - item.created_at is defined
        - (item.created_at | to_datetime('%Y-%m-%dT%H:%M:%S.%f')).strftime('%s') | int < retention_timestamp | int
    
    - name: Display retention info
      debug:
        msg:
          - "Backup totali per questo volume: {{ volume_backups | length }}"
          - "Backup da eliminare (retention): {{ old_backups | length }}"
    
    - name: Delete old backups via Cinder API
      uri:
        url: "{{ cinder_endpoint }}/backups/{{ item.id }}"
        method: DELETE
        headers:
          X-Auth-Token: "{{ os_token }}"
        validate_certs: false
        status_code: [202, 204]
      loop: "{{ old_backups }}"
      when: old_backups | length > 0
      ignore_errors: true
    
    # =============================================
    # 10. SUMMARY
    # =============================================
    
    - name: Show success message
      debug:
        msg:
          - "=============================================="
          - "✓ BACKUP COMPLETATO CON SUCCESSO"
          - "=============================================="
          - "Backup Name: {{ final_backup_name }}"
          - "Backup ID: {{ backup_id }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Status: {{ backup_status_response.json.backup.status }}"
          - "Size: {{ backup_status_response.json.backup.size | default('N/A') }} GB"
          - "---"
          - "Backup totali per questo volume: {{ volume_backups | length }}"
          - "Backup eliminati (retention): {{ old_backups | length }}"
          - "Retention policy: {{ retention_days }} giorni"
          - "=============================================="
