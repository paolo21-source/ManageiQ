---
# ============================================
# Cinder Volume Backup - VERSIONE FINALE CORRETTA
# Usa solo moduli Ansible (no shell commands)
# ============================================

- name: Execute OpenStack Cinder Volume Backup
  hosts: localhost
  connection: local
  gather_facts: true
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Ensure volume_id is provided
      assert:
        that: volume_id is defined and volume_id | length > 0
        fail_msg: "ERROR: volume_id is missing"
        success_msg: "Volume ID received: {{ volume_id }}"
    
    # =============================================
    # 2. IMPOSTA DEFAULT
    # =============================================
    
    - name: Set default retention
      set_fact:
        retention_days: "{{ retention_days | default(15) }}"
    
    - name: Set tenant_name from variable or environment
      set_fact:
        tenant_name: "{{ tenant_name | default(lookup('env', 'OS_PROJECT_NAME') | default('default')) }}"
    
    # =============================================
    # 3. RECUPERA NOME VOLUME DA OPENSTACK
    # =============================================
    
    - name: Get all volumes from OpenStack
      openstack.cloud.volume_info:
        details: true
      register: all_volumes
    
    - name: Find volume by ID
      set_fact:
        volume_data: "{{ all_volumes.volumes | selectattr('id', 'equalto', volume_id) | first | default(None) }}"
    
    - name: Check if volume exists
      fail:
        msg: "Volume {{ volume_id }} not found in OpenStack"
      when: volume_data is none
    
    - name: Set volume name
      set_fact:
        volume_name: "{{ volume_data.name }}"
    
    # =============================================
    # 4. GENERA NOME BACKUP FINALE
    # Format: anno_mese_giorno_nome_backup_tenant
    # =============================================
    
    - name: Generate date prefix
      set_fact:
        date_prefix: "{{ ansible_date_time.year }}_{{ '%02d' | format(ansible_date_time.month | int) }}_{{ '%02d' | format(ansible_date_time.day | int) }}"
    
    - name: Clean tenant name
      set_fact:
        clean_tenant_name: "{{ tenant_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Check if custom backup_name is provided
      set_fact:
        has_backup_name: "{{ backup_name is defined and backup_name | length > 0 }}"
    
    - name: Use custom backup name if provided
      set_fact:
        clean_backup_name: "{{ backup_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
      when: has_backup_name
    
    - name: Generate default backup name from volume if not provided
      set_fact:
        clean_backup_name: "backup_{{ volume_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
      when: not has_backup_name
    
    - name: Compose final backup name (date + name + tenant)
      set_fact:
        final_backup_name: "{{ date_prefix }}_{{ clean_backup_name }}_{{ clean_tenant_name }}"
    
    - name: Display backup info
      debug:
        msg:
          - "=============================================="
          - "BACKUP VOLUME OPENSTACK"
          - "=============================================="
          - "Volume ID: {{ volume_id }}"
          - "Volume Name: {{ volume_name }}"
          - "Tenant: {{ tenant_name }}"
          - "---"
          - "Nome backup finale: {{ final_backup_name }}"
          - "  - Data: {{ date_prefix }}"
          - "  - Nome: {{ clean_backup_name }}"
          - "  - Tenant: {{ clean_tenant_name }}"
          - "---"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 5. CREA BACKUP
    # =============================================
    
    - name: Create OpenStack volume backup
      openstack.cloud.volume_backup:
        volume: "{{ volume_id }}"
        state: present
        force: true
        name: "{{ final_backup_name }}"
        description: "Backup automatico daily - Retention {{ retention_days }}gg - Tenant: {{ tenant_name }}"
      register: backup_result
    
    - name: Show backup result
      debug:
        msg: 
          - "✓ Backup created successfully!"
          - "Name: {{ backup_result.backup.name }}"
          - "ID: {{ backup_result.backup.id }}"
          - "Status: {{ backup_result.backup.status }}"
      when: backup_result.backup is defined
    
    # =============================================
    # 6. APPLICA RETENTION POLICY (15gg)
    # =============================================
    
    - name: Get all backups for this volume
      openstack.cloud.volume_backup_info:
        volume: "{{ volume_id }}"
      register: all_backups_info
      ignore_errors: true
    
    - name: Set backups list
      set_fact:
        all_backups: "{{ all_backups_info.backups | default([]) }}"
      when: all_backups_info is defined
    
    - name: Calculate retention date
      set_fact:
        retention_date: "{{ '%Y-%m-%d' | strftime((ansible_date_time.epoch | int) - (retention_days | int * 86400)) }}"
    
    - name: Find old backups to delete
      set_fact:
        old_backups: "{{ all_backups | selectattr('created_at', 'defined') | selectattr('created_at', 'lt', retention_date) | list }}"
      when: all_backups | length > 0
    
    - name: Display retention info
      debug:
        msg:
          - "Retention: {{ retention_days }} giorni"
          - "Cutoff date: {{ retention_date }}"
          - "Total backups: {{ all_backups | length }}"
          - "Backups to delete: {{ old_backups | default([]) | length }}"
    
    - name: Delete old backups
      openstack.cloud.volume_backup:
        name: "{{ item.id }}"
        state: absent
      loop: "{{ old_backups }}"
      when:
        - old_backups is defined
        - old_backups | length > 0
      register: delete_results
      ignore_errors: true
    
    - name: Show cleanup result
      debug:
        msg: "✓ Retention applied - Deleted {{ delete_results.results | default([]) | length }} old backup(s)"
      when:
        - old_backups is defined
        - old_backups | length > 0
    
    # =============================================
    # 7. RIEPILOGO FINALE
    # =============================================
    
    - name: Final summary
      debug:
        msg:
          - "=============================================="
          - "BACKUP COMPLETATO"
          - "=============================================="
          - "Backup Name: {{ final_backup_name }}"
          - "Backup ID: {{ backup_result.backup.id | default('N/A') }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "Old backups deleted: {{ old_backups | default([]) | length }}"
          - "=============================================="
