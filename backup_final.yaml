---
# ============================================
# Cinder Volume Backup - AGGIORNATO
# Con tenant, naming convention e retention 15gg
# ============================================

- name: Execute OpenStack Cinder Volume Backup
  hosts: localhost
  connection: local
  gather_facts: true  # serve per ansible_date_time
  
  vars:
    # Variabili passate da ManageIQ o dallo schedule
    volume_id: "{{ volume_id }}"
    volume_name: "{{ volume_name | default('unknown') }}"
    tenant_name: "{{ tenant_name | default('default') }}"
    tenant_id: "{{ tenant_id | default('unknown') }}"
    retention_days: "{{ retention_days | default(15) }}"
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Ensure volume_id is provided
      assert:
        that: volume_id is defined and volume_id | length > 0
        fail_msg: "ERROR: volume_id is missing or empty. Check ManageIQ → AWX integration."
        success_msg: "Volume ID received: {{ volume_id }}"
    
    # =============================================
    # 2. RECUPERA INFO VOLUME (se non passato)
    # =============================================
    
    - name: Get volume info from OpenStack
      openstack.cloud.volume_info:
        name: "{{ volume_id }}"
      register: volume_info
      when: volume_name == 'unknown'
      ignore_errors: true
    
    - name: Set volume name from OpenStack
      set_fact:
        volume_name: "{{ volume_info.volumes[0].name }}"
      when:
        - volume_name == 'unknown'
        - volume_info is defined
        - volume_info.volumes is defined
        - volume_info.volumes | length > 0
    
    - name: Set fallback volume name
      set_fact:
        volume_name: "volume-{{ volume_id[:8] }}"
      when: volume_name == 'unknown'
    
    # =============================================
    # 3. RECUPERA TENANT (FIX 1)
    # =============================================
    
    - name: Get tenant from OpenStack environment
      shell: echo $OS_PROJECT_NAME
      register: os_project_output
      changed_when: false
      when: tenant_name == 'default'
    
    - name: Update tenant name
      set_fact:
        tenant_name: "{{ os_project_output.stdout }}"
      when:
        - tenant_name == 'default'
        - os_project_output is defined
        - os_project_output.stdout is defined
        - os_project_output.stdout | length > 0
    
    - name: Get tenant ID
      shell: openstack project show {{ tenant_name }} -f value -c id 2>/dev/null || echo "{{ tenant_name }}"
      register: tenant_id_output
      changed_when: false
      when: tenant_id == 'unknown'
    
    - name: Update tenant ID
      set_fact:
        tenant_id: "{{ tenant_id_output.stdout }}"
      when:
        - tenant_id == 'unknown'
        - tenant_id_output is defined
        - tenant_id_output.stdout is defined
        - tenant_id_output.stdout | length > 0
    
    # =============================================
    # 4. GENERA NOME BACKUP (FIX 2)
    # Format: anno_mese_giorno_backup_volumename_tenantid
    # =============================================
    
    - name: Clean volume name
      set_fact:
        clean_volume_name: "{{ volume_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Generate backup name with naming convention
      set_fact:
        backup_name: "{{ ansible_date_time.year }}_{{ '%02d' | format(ansible_date_time.month | int) }}_{{ '%02d' | format(ansible_date_time.day | int) }}_backup_{{ clean_volume_name }}_{{ tenant_id }}"
    
    - name: Display backup info
      debug:
        msg:
          - "=============================================="
          - "BACKUP VOLUME OPENSTACK"
          - "=============================================="
          - "Volume ID: {{ volume_id }}"
          - "Volume Name: {{ volume_name }}"
          - "Tenant: {{ tenant_name }} ({{ tenant_id }})"
          - "Backup Name: {{ backup_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 5. CREA BACKUP
    # =============================================
    
    - name: Ensure OpenStack volume backup is created
      openstack.cloud.volume_backup:
        volume: "{{ volume_id }}"
        state: present
        force: true
        name: "{{ backup_name }}"
        description: "Backup automatico daily - Retention {{ retention_days }}gg - Tenant: {{ tenant_name }}"
      register: backup_result
    
    - name: Show backup result
      debug:
        msg: 
          - "✓ Backup created successfully!"
          - "Name: {{ backup_result.backup.name }}"
          - "ID: {{ backup_result.backup.id }}"
          - "Status: {{ backup_result.backup.status }}"
      when: backup_result.backup is defined
    
    # =============================================
    # 6. APPLICA RETENTION POLICY (FIX 4)
    # Elimina backup più vecchi di 15 giorni
    # =============================================
    
    - name: Get all backups for this volume
      shell: |
        openstack volume backup list --volume {{ volume_id }} -f json
      register: all_backups_raw
      changed_when: false
      failed_when: false
    
    - name: Parse backup list
      set_fact:
        all_backups: "{{ all_backups_raw.stdout | from_json }}"
      when:
        - all_backups_raw.stdout is defined
        - all_backups_raw.stdout | length > 2
    
    - name: Calculate retention date
      shell: date -d "{{ retention_days }} days ago" +%Y-%m-%d
      register: retention_date_output
      changed_when: false
      when: all_backups is defined
    
    - name: Find old backups to delete
      set_fact:
        old_backups: "{{ all_backups | selectattr('Created At', 'defined') | selectattr('Created At', 'lt', retention_date_output.stdout) | list }}"
      when:
        - all_backups is defined
        - retention_date_output is defined
        - all_backups | length > 0
    
    - name: Display retention info
      debug:
        msg:
          - "Retention: {{ retention_days }} giorni"
          - "Cutoff date: {{ retention_date_output.stdout | default('N/A') }}"
          - "Total backups: {{ all_backups | default([]) | length }}"
          - "Backups to delete: {{ old_backups | default([]) | length }}"
      when: all_backups is defined
    
    - name: Delete old backups
      shell: |
        openstack volume backup delete {{ item.ID }}
      loop: "{{ old_backups }}"
      when:
        - old_backups is defined
        - old_backups | length > 0
      register: delete_results
      failed_when: false
    
    - name: Show cleanup result
      debug:
        msg: "✓ Retention applied - Deleted {{ delete_results.results | default([]) | length }} old backup(s)"
      when:
        - old_backups is defined
        - old_backups | length > 0
    
    # =============================================
    # 7. RIEPILOGO FINALE
    # =============================================
    
    - name: Final summary
      debug:
        msg:
          - "=============================================="
          - "BACKUP COMPLETATO"
          - "=============================================="
          - "Backup Name: {{ backup_name }}"
          - "Backup ID: {{ backup_result.backup.id | default('N/A') }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }} ({{ tenant_id }})"
          - "Retention: {{ retention_days }} giorni"
          - "Old backups deleted: {{ old_backups | default([]) | length }}"
          - "=============================================="
