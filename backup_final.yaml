---
# ============================================
# Cinder Volume Backup - VERSIONE SEMPLIFICATA
# Solo volume_id (required) e tenant_name (optional)
# ============================================

- name: Execute OpenStack Cinder Volume Backup
  hosts: localhost
  connection: local
  gather_facts: true
  
  tasks:
    # =============================================
    # 1. VALIDAZIONE INPUT
    # =============================================
    
    - name: Ensure volume_id is provided
      assert:
        that: volume_id is defined and volume_id | length > 0
        fail_msg: "ERROR: volume_id is missing or empty"
        success_msg: "Volume ID received: {{ volume_id }}"
    
    # =============================================
    # 2. IMPOSTA VALORI DI DEFAULT
    # =============================================
    
    - name: Set default retention
      set_fact:
        retention_days: "{{ retention_days | default(15) }}"
    
    # =============================================
    # 3. RECUPERA INFO VOLUME DA OPENSTACK
    # Include project_id (tenant)
    # =============================================
    
    - name: Get volume info from OpenStack
      shell: |
        openstack volume show {{ volume_id }} -f json
      register: volume_info_raw
      changed_when: false
    
    - name: Parse volume info
      set_fact:
        volume_data: "{{ volume_info_raw.stdout | from_json }}"
    
    - name: Set volume name
      set_fact:
        volume_name: "{{ volume_data.name }}"
    
    - name: Set volume project_id (tenant)
      set_fact:
        volume_project_id: "{{ volume_data.os-vol-tenant-attr:tenant_id | default(volume_data.project_id | default('unknown')) }}"
    
    - name: Display volume info
      debug:
        msg:
          - "Volume name: {{ volume_name }}"
          - "Volume project_id: {{ volume_project_id }}"
    
    # =============================================
    # 4. RECUPERA TENANT NAME DA PROJECT_ID
    # =============================================
    
    - name: Get tenant name from project_id
      shell: |
        openstack project show {{ volume_project_id }} -f value -c name 2>/dev/null || echo "unknown"
      register: tenant_name_output
      changed_when: false
      when: volume_project_id != 'unknown'
    
    - name: Set tenant name
      set_fact:
        tenant_name: "{{ tenant_name | default(tenant_name_output.stdout | default('default')) }}"
      when: tenant_name_output is defined
    
    - name: Set fallback tenant name
      set_fact:
        tenant_name: "{{ tenant_name | default('default') }}"
      when: tenant_name is not defined
    
    - name: Display tenant info
      debug:
        msg: "Tenant resolved: {{ tenant_name }}"
    
    # =============================================
    # 5. GENERA NOME BACKUP
    # Format: anno_mese_giorno_backup_volumename_tenantname
    # =============================================
    
    - name: Clean volume name (remove special characters)
      set_fact:
        clean_volume_name: "{{ volume_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Clean tenant name (remove special characters)
      set_fact:
        clean_tenant_name: "{{ tenant_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    
    - name: Generate backup name
      set_fact:
        backup_name: "{{ ansible_date_time.year }}_{{ '%02d' | format(ansible_date_time.month | int) }}_{{ '%02d' | format(ansible_date_time.day | int) }}_backup_{{ clean_volume_name }}_{{ clean_tenant_name }}"
    
    - name: Display backup info
      debug:
        msg:
          - "=============================================="
          - "BACKUP VOLUME OPENSTACK"
          - "=============================================="
          - "Volume ID: {{ volume_id }}"
          - "Volume Name: {{ volume_name }}"
          - "Tenant: {{ tenant_name }}"
          - "Backup Name: {{ backup_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "=============================================="
    
    # =============================================
    # 6. CREA BACKUP
    # =============================================
    
    - name: Create OpenStack volume backup
      openstack.cloud.volume_backup:
        volume: "{{ volume_id }}"
        state: present
        force: true
        name: "{{ backup_name }}"
        description: "Backup automatico daily - Retention {{ retention_days }}gg - Tenant: {{ tenant_name }}"
      register: backup_result
    
    - name: Show backup result
      debug:
        msg: 
          - "✓ Backup created successfully!"
          - "Name: {{ backup_result.backup.name }}"
          - "ID: {{ backup_result.backup.id }}"
          - "Status: {{ backup_result.backup.status }}"
      when: backup_result.backup is defined
    
    # =============================================
    # 7. APPLICA RETENTION POLICY (15gg)
    # =============================================
    
    - name: Get all backups for this volume
      shell: |
        openstack volume backup list --volume {{ volume_id }} -f json
      register: all_backups_raw
      changed_when: false
      failed_when: false
    
    - name: Parse backup list
      set_fact:
        all_backups: "{{ all_backups_raw.stdout | from_json }}"
      when:
        - all_backups_raw.stdout is defined
        - all_backups_raw.stdout | length > 2
    
    - name: Calculate retention date
      shell: date -d "{{ retention_days }} days ago" +%Y-%m-%d
      register: retention_date_output
      changed_when: false
      when: all_backups is defined
    
    - name: Find old backups to delete
      set_fact:
        old_backups: "{{ all_backups | selectattr('Created At', 'defined') | selectattr('Created At', 'lt', retention_date_output.stdout) | list }}"
      when:
        - all_backups is defined
        - retention_date_output is defined
        - all_backups | length > 0
    
    - name: Display retention info
      debug:
        msg:
          - "Retention: {{ retention_days }} giorni"
          - "Cutoff date: {{ retention_date_output.stdout | default('N/A') }}"
          - "Total backups: {{ all_backups | default([]) | length }}"
          - "Backups to delete: {{ old_backups | default([]) | length }}"
      when: all_backups is defined
    
    - name: Delete old backups
      shell: |
        openstack volume backup delete {{ item.ID }}
      loop: "{{ old_backups }}"
      when:
        - old_backups is defined
        - old_backups | length > 0
      register: delete_results
      failed_when: false
    
    - name: Show cleanup result
      debug:
        msg: "✓ Retention applied - Deleted {{ delete_results.results | default([]) | length }} old backup(s)"
      when:
        - old_backups is defined
        - old_backups | length > 0
    
    # =============================================
    # 8. RIEPILOGO FINALE
    # =============================================
    
    - name: Final summary
      debug:
        msg:
          - "=============================================="
          - "BACKUP COMPLETATO"
          - "=============================================="
          - "Backup Name: {{ backup_name }}"
          - "Backup ID: {{ backup_result.backup.id | default('N/A') }}"
          - "Volume: {{ volume_name }} ({{ volume_id }})"
          - "Tenant: {{ tenant_name }}"
          - "Retention: {{ retention_days }} giorni"
          - "Old backups deleted: {{ old_backups | default([]) | length }}"
          - "=============================================="
