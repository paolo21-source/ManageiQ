---
- name: Modify OpenStack Load Balancer L4
  hosts: localhost
  gather_facts: no
  collections:
    - openstack.cloud

  vars:
    action: "{{ action | default('add_member') }}"
    # Nomi derivati
    pool_name: "{{ pool_name | default(lb_name + '-pool') }}"

  tasks:
    # ========================================
    # VALIDATION
    # ========================================
    - name: Validate required variables
      assert:
        that:
          - loadbalancer_id is defined
          - loadbalancer_id | length > 0
          - action is defined
        fail_msg: "ERRORE: Variabili richieste mancanti!"

    - name: Log start
      debug:
        msg: "Modifica Load Balancer ID: {{ loadbalancer_id }} | Azione: {{ action }}"

    # ========================================
    # NOTIFICA: INIZIO MODIFICA
    # ========================================
    - name: Send start notification to ManageIQ
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "info"
            message: "üöÄ Avvio modifica Load Balancer | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      when:
        - manageiq_notification_url is defined
        - manageiq_auth_token is defined
        - manageiq_user_id is defined
      ignore_errors: yes

    # ========================================
    # GET LOAD BALANCER INFO (con modulo Ansible)
    # ========================================
    - name: Get Load Balancer details
      openstack.cloud.loadbalancer_info:
        loadbalancer: "{{ loadbalancer_id }}"
      register: lb_info_result

    - name: Fail if Load Balancer not found
      fail:
        msg: "Load Balancer con ID {{ loadbalancer_id }} non trovato!"
      when: lb_info_result.loadbalancer is not defined

    - name: Set Load Balancer facts
      set_fact:
        lb_name: "{{ lb_info_result.loadbalancer.name }}"
        lb_vip_address: "{{ lb_info_result.loadbalancer.vip_address }}"
        lb_vip_port_id: "{{ lb_info_result.loadbalancer.vip_port_id }}"
        lb_operating_status: "{{ lb_info_result.loadbalancer.operating_status }}"

    - name: Log Load Balancer info
      debug:
        msg: "‚úÖ Load Balancer: {{ lb_name }} (VIP: {{ lb_vip_address }}, Status: {{ lb_operating_status }})"

    # ========================================
    # AZIONE: ADD MEMBER
    # ========================================
    - name: Add member to pool
      when: action == 'add_member'
      block:
        - name: Validate add_member parameters
          assert:
            that:
              - pool_name is defined
              - member_address is defined
              - member_port is defined
            fail_msg: "‚ùå Parametri mancanti per add_member"

        - name: Set member name if not provided
          set_fact:
            member_name: "{{ member_name | default('member-' + member_address | replace('.', '-')) }}"

        - name: Add member to pool
          openstack.cloud.lb_member:
            name: "{{ member_name }}"
            pool: "{{ pool_name }}"
            address: "{{ member_address }}"
            protocol_port: "{{ member_port }}"
            subnet_id: "{{ member_subnet | default(omit) }}"
            weight: "{{ member_weight | default(1) | int }}"
            state: present
            wait: yes
            timeout: 120
          register: member_add_result

        - name: Log member added
          debug:
            msg: "‚úÖ Member {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"

        - name: Notify member added
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Backend server {{ member_name }} ({{ member_address }}:{{ member_port }}) aggiunto al pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when:
            - manageiq_notification_url is defined
            - manageiq_auth_token is defined
            - manageiq_user_id is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE MEMBER
    # ========================================
    - name: Remove member from pool
      when: action == 'remove_member'
      block:
        - name: Validate remove_member parameters
          assert:
            that:
              - pool_name is defined
              - member_name is defined
            fail_msg: "‚ùå Parametri mancanti per remove_member"

        - name: Get member info
          openstack.cloud.lb_member_info:
            pool: "{{ pool_name }}"
            name: "{{ member_name }}"
          register: member_info_result

        - name: Fail if member not found
          fail:
            msg: "‚ùå Member {{ member_name }} non trovato nel pool {{ pool_name }}"
          when: member_info_result.member is not defined

        - name: Remove member from pool
          openstack.cloud.lb_member:
            name: "{{ member_name }}"
            pool: "{{ pool_name }}"
            state: absent
            wait: yes
            timeout: 120
          register: member_remove_result

        - name: Log member removed
          debug:
            msg: "‚úÖ Member {{ member_name }} rimosso dal pool {{ pool_name }}"

        - name: Notify member removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Backend server {{ member_name }} rimosso dal pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when:
            - manageiq_notification_url is defined
            - manageiq_auth_token is defined
            - manageiq_user_id is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: UPDATE HEALTH MONITOR
    # ========================================
    - name: Update or create health monitor
      when: action == 'update_monitor'
      block:
        - name: Validate update_monitor parameters
          assert:
            that:
              - pool_name is defined
              - monitor_type is defined
              - monitor_delay is defined
              - monitor_timeout is defined
            fail_msg: "‚ùå Parametri mancanti per update_monitor"

        - name: Get pool info to check existing monitor
          openstack.cloud.lb_pool_info:
            name: "{{ pool_name }}"
          register: pool_info_result

        - name: Delete existing health monitor if present
          openstack.cloud.lb_health_monitor:
            pool: "{{ pool_name }}"
            state: absent
            wait: yes
          when: pool_info_result.pool.health_monitor_id is defined
          ignore_errors: yes

        - name: Create new health monitor
          openstack.cloud.lb_health_monitor:
            name: "{{ lb_name }}-monitor"
            pool: "{{ pool_name }}"
            type: "{{ monitor_type | upper }}"
            delay: "{{ monitor_delay | int }}"
            health_monitor_timeout: "{{ monitor_timeout | int }}"
            max_retries: "{{ monitor_max_retries | default(3) | int }}"
            max_retries_down: "{{ monitor_max_retries_down | default(3) | int }}"
            http_method: "{{ monitor_http_method | default(omit) }}"
            url_path: "{{ monitor_url_path | default(omit) }}"
            expected_codes: "{{ monitor_expected_codes | default(omit) }}"
            state: present
            wait: yes
            timeout: 120
          register: monitor_create_result

        - name: Log monitor created
          debug:
            msg: "‚úÖ Health Monitor creato/aggiornato per pool {{ pool_name }}"

        - name: Notify monitor updated
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Health Monitor ({{ monitor_type }}) configurato per pool {{ pool_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when:
            - manageiq_notification_url is defined
            - manageiq_auth_token is defined
            - manageiq_user_id is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: ASSIGN FLOATING IP
    # ========================================
    - name: Assign Floating IP to Load Balancer
      when: action == 'assign_fip'
      block:
        - name: Validate assign_fip parameters
          assert:
            that:
              - floating_ip_network is defined or floating_ip is defined
            fail_msg: "‚ùå Specificare floating_ip_network o floating_ip"

        - name: Create or allocate Floating IP
          openstack.cloud.floating_ip:
            network: "{{ floating_ip_network | default('external') }}"
            floating_ip_address: "{{ floating_ip | default(omit) }}"
            state: present
          register: fip_create_result

        - name: Attach Floating IP to Load Balancer VIP port
          openstack.cloud.floating_ip:
            floating_ip_address: "{{ fip_create_result.floating_ip.floating_ip_address }}"
            port: "{{ lb_vip_port_id }}"
            state: present
          register: fip_attach_result

        - name: Save Floating IP
          set_fact:
            lb_floating_ip: "{{ fip_create_result.floating_ip.floating_ip_address }}"

        - name: Log FIP assigned
          debug:
            msg: "‚úÖ Floating IP {{ lb_floating_ip }} assegnato al Load Balancer {{ lb_name }}"

        - name: Notify FIP assigned
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Floating IP {{ lb_floating_ip }} assegnato al Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when:
            - manageiq_notification_url is defined
            - manageiq_auth_token is defined
            - manageiq_user_id is defined
          ignore_errors: yes

    # ========================================
    # AZIONE: REMOVE FLOATING IP
    # ========================================
    - name: Remove Floating IP from Load Balancer
      when: action == 'remove_fip'
      block:
        - name: Get Floating IPs attached to VIP port
          openstack.cloud.floating_ip_info:
            port: "{{ lb_vip_port_id }}"
          register: fips_info

        - name: Detach Floating IPs
          openstack.cloud.floating_ip:
            floating_ip_address: "{{ item.floating_ip_address }}"
            state: absent
          loop: "{{ fips_info.floating_ips }}"
          when: fips_info.floating_ips | length > 0

        - name: Log FIP removed
          debug:
            msg: "‚úÖ Floating IP rimosso dal Load Balancer {{ lb_name }}"

        - name: Notify FIP removed
          uri:
            url: "{{ manageiq_notification_url }}"
            method: POST
            headers:
              X-Auth-Token: "{{ manageiq_auth_token }}"
              Content-Type: application/json
            body:
              action: "update"
              resource:
                level: "success"
                message: "‚úÖ Floating IP rimosso dal Load Balancer {{ lb_name }}"
                subject_type: "User"
                subject_id: "{{ manageiq_user_id }}"
            body_format: json
            status_code: 200
            timeout: 10
            validate_certs: no
          when:
            - manageiq_notification_url is defined
            - manageiq_auth_token is defined
            - manageiq_user_id is defined
          ignore_errors: yes

    # ========================================
    # FINAL SUMMARY
    # ========================================
    - name: Generate final summary
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë              LOAD BALANCER MODIFICATO CON SUCCESSO                ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          
          Load Balancer: {{ lb_name }}
          Azione:        {{ action }}
          VIP:           {{ lb_vip_address }}
          Status:        {{ lb_operating_status }}
          {% if lb_floating_ip is defined %}Floating IP:   {{ lb_floating_ip }}{% endif %}

    - name: Send final notification
      uri:
        url: "{{ manageiq_notification_url }}"
        method: POST
        headers:
          X-Auth-Token: "{{ manageiq_auth_token }}"
          Content-Type: application/json
        body:
          action: "update"
          resource:
            level: "success"
            message: "‚úÖ Load Balancer {{ lb_name }} modificato con successo | Azione: {{ action }}"
            subject_type: "User"
            subject_id: "{{ manageiq_user_id }}"
        body_format: json
        status_code: 200
        timeout: 10
        validate_certs: no
      when:
        - manageiq_notification_url is defined
        - manageiq_auth_token is defined
        - manageiq_user_id is defined
      ignore_errors: yes
